#!/usr/bin/python3
#importing necessary packages
import sys,time
import easysnmp
import math
from easysnmp import Session
from easysnmp import snmp_get,snmp_walk
#agent information
agent_info = sys.argv[1]
#splits the information using':'
attribute = agent_info.split(':')
#ip address of the agent
ip_address = attribute[0]
#port number of the agent
port_no = attribute[1]
agent_community = attribute[2]
#sample frequency
sample_frequency = float(sys.argv[2])
#sample time
sample_time = 1/sample_frequency
#total number of sample_count
sample_count = int(sys.argv[3])
#oid information
oids = []
initial_oid = []
ending_oid = []
timer = ""
for x in range(4, len(sys.argv)):
oids.append(sys.argv[x])
#sys up time
oids.insert(0,'1.3.6.1.2.1.1.3.0')
session=Session(hostname=ip_address, remote_port=port_no, 
community=agent_community, version=2,timeout=1,retries=3)
def snmp():
global initial_oid, initial_oidtime, ending_oidtime
#SNMP session
result = session.get(oids)
TimerSys = int(result[0].value)/100
ending_oid = []
for y in range(1,len(result)):
if result[y].value!='NOSUCHOBJECT' and 
result[y].value!='NOSUCHINSTANCE':
ending_oid.append(int(result[y].value))
#calculation of the bit rate
if count!=0 and len(initial_oid)>0:
if TimerSys > initial_oidtime:
if result[y].snmp_type == 
'COUNTER' or result[y].snmp_type == 'COUNTER32' or result[y].snmp_type == 
'COUNTER64':
difference_in_oid 
= int(ending_oid[y-1]) - int(initial_oid[y-1])
difference_in_time = round(TimerSys - initial_oidtime,1)
rate_obtained = 
int(difference_in_oid/difference_in_time)
#wrapping counter
if rate_obtained 
< 0:
if TimerSys 
> initial_oidtime:
# if snmp type is counter32
if result[y].snmp_type == "COUNTER32":
difference_in_oid = difference_in_oid+2**32
# try-except loop to print sample time and rate of oid(ROID)
try:
if timer==str(ending_oidtime):
print(round(difference_in_oid/difference_in_time), end='|' )
else:
print(ending_oidtime, '|', 
round(difference_in_oid/difference_in_time), end='|' 
);timer=str(ending_oidtime)
except:
print(ending_oidtime, '|', 
round(difference_in_oid/difference_in_time), end='|' 
);timer=str(ending_oidtime)
# if snmp type is counter64
elif result[y].snmp_type == "COUNTER64":
difference_in_oid = difference_in_oid+2**64
# try-except loop to print sample time and rate of oid(ROID)
try:
if timer==str(ending_oidtime):
print(round(difference_in_oid/difference_in_time), end='|' )
else:
print(ending_oidtime, '|', 
round(difference_in_oid/difference_in_time), end='|' 
);timer=str(ending_oidtime)
except:
print(ending_oidtime, '|', 
round(difference_in_oid/difference_in_time), end='|' 
);timer=str(ending_oidtime)
else:
print(str(ending_oidtime), '|', str(rate_obtained), end='|' )
else:
print(" This seems like the system was restarted ")
break
else:
try:
if timer==str(ending_oidtime):
print( round(rate_obtained) , end="|")
else:
print(ending_oidtime, "|", round(rate_obtained), 
end="|");timer=str(ending_oidtime)
except:
print(ending_oidtime, "|", round(rate_obtained), 
end="|");timer=str(ending_oidtime)
# if snmp type is gauge
elif 
result[y].snmp_type=='GAUGE':
oid_diff = 
int(ending_oid[y-1]) - int(initial_oid[y-1])
# try-except 
loop to print sample time and the current value + the relative change 
compared to the previously successfully read value
try:
if 
timer==str(ending_oidtime):
print(ending_oid[len(ending_oid)-1],"(",+oid_diff,")", end="|")
else:
print(ending_oidtime,"|",ending_oid[len(ending_oid)-
1],"(",+oid_diff,")", end="|");timer=str(ending_oidtime)
except:
print(ending_oidtime,"|",ending_oid[len(ending_oid)-
1],"(",+oid_diff,")", end="|");timer=str(ending_oidtime)
else:
print(" This seems like the 
system was restarted ")
break
initial_oid = ending_oid
initial_oidtime = TimerSys
#to run forever
if sample_count == -1:
count = 0
initial_oid = []
while True:
ending_oidtime = time.time()
snmp()
if count!=0:
print(end="\n")
resulttime = time.time()
count = count+1
if sample_time >= resulttime - ending_oidtime:
time.sleep((sample_time - resulttime + 
ending_oidtime))
else:
n=math.ceil((resulttimeending_oidtime)/sample_time)
time.sleep(((n*sample_time) - resulttime + 
ending_oidtime))
else:
initial_oid = []
a=sample_count
for count in range(0,sample_count+1):
ending_oidtime = time.time()
snmp()
if count!=0:
print(end="\n")
resulttime = time.time()
if sample_time >= resulttime - ending_oidtime:
time.sleep((sample_time - resulttime + 
ending_oidtime))
else:
n=math.ceil((resulttimeending_oidtime)/sample_time)
time.sleep(((n*sample_time) - resulttime + 
ending_oidtime))
